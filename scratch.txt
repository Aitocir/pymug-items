RPG engine


item definitions

static items are parsed first:
    dagger      size 2      weight 10       type weapon_base
    sword       size 8      weight 40       type weapon_base
    pie         size 3      weight 15       type fruit_food_base
    jam         size 1      weight 3        type fruit_food_base

dynamic items are then parsed using existing item definitions as input:
    iron        weapon_base          size 1          weight 2.5      type metal_weapon      tags: made_of_iron,
    bronze      weapon_base          size 1          weight 2.0      type metal_weapon      tags: made_of_bronze,
    bronze      jewelry_base         size 1          weight 2.0      type metal_jewelry     tags: made_of_bronze,
    apple       fruit_food_base      size 1          weight 1        type food              tags: apple_food, 

multiple lists of dynamic item definitions can be defined and run in order so they can build deeper and deeper item defs:
    rusty       metal_weapon         size 1          weight 0.9      type weapon            tags: 
    fine        metal_weapon         size 1          weight 1        type weapon
    fine        metal_jewelry        size 1          weight 1        type jewelry
    
    
    
all static item names must be unique among themselves.

all dynamic item names and target tag combinations must be unique among themselves. identical dynamic item names can be disambiguated by comparing their target tag to the type tag on the root object and discarding non-applicable dynamic item names.

when compiling an item, all tags are accumulated together but the final item type is the type of the highest order dynamic item (first term in the proper name)

dynamic item properties act as a multiplier to static item properties. For example, "rusty iron dagger" would have the size of a dagger multipled by the sizes of rusty and iron. If a dynamic item is missing a property the static item has, NBD (same as defining as 1). If a dynamic item has a property not present on the static item, then it acts as a definition rather than a multiplier. This isn't really different logic; in all cases, all instances of each property across all item definitions are multipled together regardless of whether the source is static or dynamic. This allows dynamic items to introduce new properties to static items.

Note that items names between static and dynamic items do NOT need to be unique. This is because all dynamic names are prefixes, so they can be disambiguated easily (the final term is always static, and all other terms are always dynamic)


def get_matching_adjective_item_defs(term):
    global adj_terms
    return adj_terms[term]

def get_core_item_def(term):
    global core_terms
    return core_terms[term]

def compose_item_def(item_name):
    terms = item_name.strip().split()
    item_defs = []
    for term in terms[:-1]:
        item_defs.extend(get_matching_adjective_item_defs(term))
    core_item = get_core_item_def(terms[-1])
    adj_defs = [x for x in item_defs if x['target_type'] == core_item['type']]
    
    if len(adj_defs) < len(terms)-1:
        print('That item does not exist (adjectives cannot apply to core item)')
    elif len(adj_defs) > len(terms)-1:
        print('That item does not exist (adjectives are somehow ambiguous with core item)')
    
    item = {}
    item['name'] = item_name
    item['type'] = adj_defs[0]['type']
    
    properties = set(core_item.keys())
    for adj in adj_defs:
        properties = properties.union(set(adj.keys()))
    properties = properties.difference(set(['target_type']))
    components = adj_defs+[core_item]
    for prop in properties:
        prop_types = set()
        prop_values = []
        for comp in components:
            if prop in comp:
                prop_types.add(str(type(comp[prop]))[8:-2])
                prop_values.append(comp[prop])
        if len(prop_types) > 1 and prop_types != set(['float', 'int']):
            raise ValueError('Mismatch of types for column "{0}" between item component definitions: {1}'.format(prop, [x['name'] for x in components]))
        prop_type = list(prop_types)[0]
        if prop_type in set('float', 'int'):
            prop_value = 1
            for v in prop_values:
                prop_value *= v
        elif prop_type == 'str':
            prop_value = prop_values[0]
        elif prop_type == 'list':
            master_list = []
            for v in prop_values:
                master_list.extend(v)
            prop_value = list(set(master_list))
        elif prop_type == 'bool':
            prop_value = prop_values[0]
        else:
            raise ValueError('Invalid data type "{0}" found in column "{1}"'.format(prop_type, prop))
        item[prop] = prop_value
    return item
